import java.util.ArrayList;
import java.util.HashSet;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
public class threadPool {
    private volatile boolean RUNNING = true;// 是否正在运行
    private final ReentrantLock lock = new ReentrantLock();// 并发锁
    private final HashSet<Worker> workers = new HashSet<>();// 不重复的工作集
    private static BlockingQueue<Runnable> queue = null;// 任务阻塞队列
    private final ArrayList<Thread> threads = new ArrayList<>();// 线程工厂
    private volatile int poolsize;// 线程池的核心线程数
    private volatile int coresize;// 当前线程池中的线程数
    private volatile boolean shutdown = false;// 是否停止工作

    public threadPool(int corepoolsize,int maxpoolsize,int timeout) {
        int nums=0;
        int time=0;
        queue = new ArrayBlockingQueue<>(corepoolsize);
        nums++;
        if(nums<corepoolsize) {
            for (int i = 0; i < nums; i++) {
                this.poolsize =corepoolsize;//创建
            }
        } else if (nums>corepoolsize&&nums<maxpoolsize) {
            for (int i = 0; i < nums; i++) {
                this.poolsize = corepoolsize;
            }
            if(timeout>time){
               while (!shutdown) {

               }
            }
        } else if (nums>maxpoolsize) {
            try {
                
            }catch (Exception e) {
                e.printStackTrace();
            }//这里应该创建一个简单的等待序列

        }
    }

    
    public void execute(Runnable command) {
        if (command == null) {
            throw new NullPointerException();
        }

        if (coresize < poolsize) {
            addThread(command);
        } else {
            try {
                queue.put(command);
            } catch (InterruptedException e) {

                e.printStackTrace();
            }
        }
    }

    private void addThread(Runnable task) {

        lock.lock();
        try {
            coresize++;
            Worker worker = new Worker(task);
            workers.add(worker);
            Thread thread = new Thread(worker);
            threads.add(thread);
            thread.start();
        } finally {
            // TODO: handle finally clause
            lock.unlock();
        }

    }

    public void shutdown() {
        RUNNING = false;
        if (!workers.isEmpty()) {
            for (Worker worker : workers) {
                worker.interruptIfIdle();
            }
        }
        shutdown = true;
        Thread.currentThread().interrupt();
    }

    private final class Worker implements Runnable {

        public Worker(Runnable task) {
            // TODO Auto-generated constructor stub
            queue.offer(task);
        }

        public Runnable getTask() throws InterruptedException {
            return queue.take();
        }

        @Override
        public void run() {

            while (true && RUNNING) {
                if (shutdown) {
                    Thread.interrupted();
                }
                Runnable task = null;
                try {
                    task = getTask();
                    task.run();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        public void interruptIfIdle() {
            for (Thread thread : threads) {
                System.out.println(thread.getName() + " interrupt");
                thread.interrupt();
            }
        }

    }

    public static void main(String[] args) {
//            Scanner input = new Scanner(System.in);
//            int a=input.nextInt();
        Scanner input = new Scanner(System.in);
        int a=input.nextInt();//corepoolsize
        int b = input.nextInt();//maxpoolsize
        int c = input.nextInt();//timeout
        threadPool executor = new threadPool(a,b,c);
        for (int i = 0; i < 6; i++) {
            executor.execute(new Runnable() {

                @Override
                public void run() {
                    System.out.println("线程" + Thread.currentThread().getName() + "在工作....");
                }
            });
        }

        executor.shutdown();
    }//直接实现在线程内部进行测试
}
